// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: filesync.proto

package filesync

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/tonistiigi/fsutil/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BytesMessage contains a chunk of byte data
type BytesMessage struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// ID identifies the exporter generating the data
	ID string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *BytesMessage) Reset()      { *m = BytesMessage{} }
func (*BytesMessage) ProtoMessage() {}
func (*BytesMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1042549f1f24495, []int{0}
}
func (m *BytesMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BytesMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BytesMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BytesMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BytesMessage.Merge(m, src)
}
func (m *BytesMessage) XXX_Size() int {
	return m.Size()
}
func (m *BytesMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BytesMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BytesMessage proto.InternalMessageInfo

func (m *BytesMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *BytesMessage) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func init() {
	proto.RegisterType((*BytesMessage)(nil), "moby.filesync.v1.BytesMessage")
}

func init() { proto.RegisterFile("filesync.proto", fileDescriptor_d1042549f1f24495) }

var fileDescriptor_d1042549f1f24495 = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x50, 0x3d, 0x4b, 0x03, 0x41,
	0x14, 0xbc, 0x77, 0x48, 0x48, 0x96, 0x20, 0xb2, 0x88, 0x84, 0x14, 0xcf, 0x60, 0x95, 0xc6, 0x3d,
	0x8d, 0x5d, 0x04, 0x8b, 0x18, 0x04, 0x0b, 0x45, 0x12, 0xab, 0x74, 0xf7, 0xb1, 0x77, 0x2e, 0x26,
	0xb7, 0xe1, 0x76, 0xa3, 0x5c, 0x27, 0xf8, 0x07, 0xfc, 0x19, 0xfe, 0x14, 0xcb, 0x94, 0xa9, 0xc4,
	0x6c, 0x1a, 0xcb, 0xfc, 0x04, 0x71, 0x4f, 0x25, 0x8a, 0x20, 0x76, 0xef, 0xcd, 0xce, 0xce, 0xcc,
	0x1b, 0xb2, 0x1e, 0x8b, 0x21, 0x57, 0x79, 0x1a, 0xb2, 0x71, 0x26, 0xb5, 0xa4, 0x1b, 0x23, 0x19,
	0xe4, 0xec, 0x0b, 0xbc, 0xd9, 0xaf, 0xef, 0x26, 0x42, 0x5f, 0x4d, 0x02, 0x16, 0xca, 0x91, 0x97,
	0xc8, 0x44, 0x7a, 0x96, 0x18, 0x4c, 0x62, 0xbb, 0xd9, 0xc5, 0x4e, 0x85, 0xc0, 0x37, 0xba, 0x96,
	0xa9, 0x50, 0x5a, 0x88, 0x44, 0x78, 0xb1, 0x9a, 0x68, 0x31, 0xf4, 0x74, 0x3e, 0xe6, 0xca, 0xbb,
	0x15, 0x19, 0x2f, 0xe8, 0x3b, 0x6d, 0x52, 0xed, 0xe4, 0x9a, 0xab, 0x33, 0xae, 0x94, 0x9f, 0x70,
	0x4a, 0xc9, 0x5a, 0xe4, 0x6b, 0xbf, 0x06, 0x0d, 0x68, 0x56, 0x7b, 0x76, 0xa6, 0x5b, 0xc4, 0x15,
	0x51, 0xcd, 0x6d, 0x40, 0xb3, 0xd2, 0x29, 0x99, 0xe7, 0x6d, 0xf7, 0xb4, 0xdb, 0x73, 0x45, 0xd4,
	0xba, 0x07, 0x52, 0x3e, 0x11, 0x43, 0xde, 0xcf, 0xd3, 0x90, 0xb6, 0x49, 0xb9, 0x2b, 0xe2, 0xf8,
	0x58, 0x8e, 0x73, 0xba, 0xc9, 0x0a, 0x3b, 0x66, 0xed, 0xd8, 0x85, 0x1f, 0x5e, 0x73, 0x5d, 0xff,
	0x15, 0x6d, 0xc2, 0x1e, 0xd0, 0x43, 0x52, 0xb9, 0xf4, 0xb3, 0xbe, 0xce, 0xb8, 0x3f, 0xfa, 0xef,
	0xe7, 0xd6, 0xe0, 0x23, 0x04, 0x4f, 0x23, 0x7a, 0xbe, 0x12, 0x02, 0xd9, 0xcf, 0x2a, 0xd9, 0xea,
	0xa5, 0xf5, 0x3f, 0xde, 0xdf, 0xb5, 0x3b, 0x47, 0xd3, 0x39, 0x3a, 0xb3, 0x39, 0x3a, 0xcb, 0x39,
	0xc2, 0x9d, 0x41, 0x78, 0x34, 0x08, 0x4f, 0x06, 0x61, 0x6a, 0x10, 0x5e, 0x0c, 0xc2, 0xab, 0x41,
	0x67, 0x69, 0x10, 0x1e, 0x16, 0xe8, 0x4c, 0x17, 0xe8, 0xcc, 0x16, 0xe8, 0x0c, 0xca, 0x9f, 0x9a,
	0x41, 0xc9, 0x96, 0x7c, 0xf0, 0x16, 0x00, 0x00, 0xff, 0xff, 0x04, 0xde, 0xb5, 0xc8, 0xe6, 0x01,
	0x00, 0x00,
}

func (this *BytesMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BytesMessage)
	if !ok {
		that2, ok := that.(BytesMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	return true
}
func (this *BytesMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&filesync.BytesMessage{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFilesync(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FileSyncClient is the client API for FileSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileSyncClient interface {
	DiffCopy(ctx context.Context, opts ...grpc.CallOption) (FileSync_DiffCopyClient, error)
	TarStream(ctx context.Context, opts ...grpc.CallOption) (FileSync_TarStreamClient, error)
}

type fileSyncClient struct {
	cc *grpc.ClientConn
}

func NewFileSyncClient(cc *grpc.ClientConn) FileSyncClient {
	return &fileSyncClient{cc}
}

func (c *fileSyncClient) DiffCopy(ctx context.Context, opts ...grpc.CallOption) (FileSync_DiffCopyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FileSync_serviceDesc.Streams[0], "/moby.filesync.v1.FileSync/DiffCopy", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileSyncDiffCopyClient{stream}
	return x, nil
}

type FileSync_DiffCopyClient interface {
	Send(*types.Packet) error
	Recv() (*types.Packet, error)
	grpc.ClientStream
}

type fileSyncDiffCopyClient struct {
	grpc.ClientStream
}

func (x *fileSyncDiffCopyClient) Send(m *types.Packet) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileSyncDiffCopyClient) Recv() (*types.Packet, error) {
	m := new(types.Packet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileSyncClient) TarStream(ctx context.Context, opts ...grpc.CallOption) (FileSync_TarStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FileSync_serviceDesc.Streams[1], "/moby.filesync.v1.FileSync/TarStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileSyncTarStreamClient{stream}
	return x, nil
}

type FileSync_TarStreamClient interface {
	Send(*types.Packet) error
	Recv() (*types.Packet, error)
	grpc.ClientStream
}

type fileSyncTarStreamClient struct {
	grpc.ClientStream
}

func (x *fileSyncTarStreamClient) Send(m *types.Packet) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileSyncTarStreamClient) Recv() (*types.Packet, error) {
	m := new(types.Packet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileSyncServer is the server API for FileSync service.
type FileSyncServer interface {
	DiffCopy(FileSync_DiffCopyServer) error
	TarStream(FileSync_TarStreamServer) error
}

// UnimplementedFileSyncServer can be embedded to have forward compatible implementations.
type UnimplementedFileSyncServer struct {
}

func (*UnimplementedFileSyncServer) DiffCopy(srv FileSync_DiffCopyServer) error {
	return status.Errorf(codes.Unimplemented, "method DiffCopy not implemented")
}
func (*UnimplementedFileSyncServer) TarStream(srv FileSync_TarStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TarStream not implemented")
}

func RegisterFileSyncServer(s *grpc.Server, srv FileSyncServer) {
	s.RegisterService(&_FileSync_serviceDesc, srv)
}

func _FileSync_DiffCopy_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileSyncServer).DiffCopy(&fileSyncDiffCopyServer{stream})
}

type FileSync_DiffCopyServer interface {
	Send(*types.Packet) error
	Recv() (*types.Packet, error)
	grpc.ServerStream
}

type fileSyncDiffCopyServer struct {
	grpc.ServerStream
}

func (x *fileSyncDiffCopyServer) Send(m *types.Packet) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileSyncDiffCopyServer) Recv() (*types.Packet, error) {
	m := new(types.Packet)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileSync_TarStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileSyncServer).TarStream(&fileSyncTarStreamServer{stream})
}

type FileSync_TarStreamServer interface {
	Send(*types.Packet) error
	Recv() (*types.Packet, error)
	grpc.ServerStream
}

type fileSyncTarStreamServer struct {
	grpc.ServerStream
}

func (x *fileSyncTarStreamServer) Send(m *types.Packet) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileSyncTarStreamServer) Recv() (*types.Packet, error) {
	m := new(types.Packet)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FileSync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moby.filesync.v1.FileSync",
	HandlerType: (*FileSyncServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DiffCopy",
			Handler:       _FileSync_DiffCopy_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "TarStream",
			Handler:       _FileSync_TarStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "filesync.proto",
}

// FileSendClient is the client API for FileSend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileSendClient interface {
	DiffCopy(ctx context.Context, opts ...grpc.CallOption) (FileSend_DiffCopyClient, error)
}

type fileSendClient struct {
	cc *grpc.ClientConn
}

func NewFileSendClient(cc *grpc.ClientConn) FileSendClient {
	return &fileSendClient{cc}
}

func (c *fileSendClient) DiffCopy(ctx context.Context, opts ...grpc.CallOption) (FileSend_DiffCopyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FileSend_serviceDesc.Streams[0], "/moby.filesync.v1.FileSend/DiffCopy", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileSendDiffCopyClient{stream}
	return x, nil
}

type FileSend_DiffCopyClient interface {
	Send(*BytesMessage) error
	Recv() (*BytesMessage, error)
	grpc.ClientStream
}

type fileSendDiffCopyClient struct {
	grpc.ClientStream
}

func (x *fileSendDiffCopyClient) Send(m *BytesMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileSendDiffCopyClient) Recv() (*BytesMessage, error) {
	m := new(BytesMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileSendServer is the server API for FileSend service.
type FileSendServer interface {
	DiffCopy(FileSend_DiffCopyServer) error
}

// UnimplementedFileSendServer can be embedded to have forward compatible implementations.
type UnimplementedFileSendServer struct {
}

func (*UnimplementedFileSendServer) DiffCopy(srv FileSend_DiffCopyServer) error {
	return status.Errorf(codes.Unimplemented, "method DiffCopy not implemented")
}

func RegisterFileSendServer(s *grpc.Server, srv FileSendServer) {
	s.RegisterService(&_FileSend_serviceDesc, srv)
}

func _FileSend_DiffCopy_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileSendServer).DiffCopy(&fileSendDiffCopyServer{stream})
}

type FileSend_DiffCopyServer interface {
	Send(*BytesMessage) error
	Recv() (*BytesMessage, error)
	grpc.ServerStream
}

type fileSendDiffCopyServer struct {
	grpc.ServerStream
}

func (x *fileSendDiffCopyServer) Send(m *BytesMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileSendDiffCopyServer) Recv() (*BytesMessage, error) {
	m := new(BytesMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FileSend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moby.filesync.v1.FileSend",
	HandlerType: (*FileSendServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DiffCopy",
			Handler:       _FileSend_DiffCopy_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "filesync.proto",
}

func (m *BytesMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BytesMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BytesMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintFilesync(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintFilesync(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFilesync(dAtA []byte, offset int, v uint64) int {
	offset -= sovFilesync(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BytesMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovFilesync(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovFilesync(uint64(l))
	}
	return n
}

func sovFilesync(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFilesync(x uint64) (n int) {
	return sovFilesync(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BytesMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BytesMessage{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFilesync(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BytesMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilesync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BytesMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BytesMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFilesync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFilesync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilesync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFilesync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFilesync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFilesync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFilesync(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFilesync
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFilesync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFilesync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFilesync
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFilesync
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFilesync
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFilesync        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFilesync          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFilesync = fmt.Errorf("proto: unexpected end of group")
)
